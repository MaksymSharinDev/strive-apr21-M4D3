<mxfile host="Electron" modified="2021-06-02T13:29:41.941Z" agent="5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/14.6.13 Chrome/89.0.4389.128 Electron/12.0.7 Safari/537.36" etag="3kofqL3WAGuWYj2rXv-c" compressed="false" version="14.6.13" type="device">
  <diagram id="NfP-XVPZcSdcYGOVhBCW" name="Page-1">
    <mxGraphModel dx="1422" dy="778" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="2336" pageHeight="1654" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="F5tstXVs3diysl1EezMk-1" value="&lt;li&gt;&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        Create a component called MyBadge which receives a text and a color as&lt;br&gt;        props. This component should render a Badge react-bootstrap component&lt;br&gt;        with those properties.&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        Create a SingleBook component as a function. The component receives a&lt;br&gt;        book object as a prop, and displays the cover and the title of the book.&lt;br&gt;        Use react-bootstrap Cards to display a book (The book object can be read&lt;br&gt;        from one of the .json book files we gave you yesterday).&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        Create a BookList component. This component receives by props a list of&lt;br&gt;        books and displays them using the SingleBook component.&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        Create a FilterBookList feature. By writing into an input field a search&lt;br&gt;        query, the BookList should show only the books with the specified string&lt;br&gt;        into the title (save the query into the BookList component state and&lt;br&gt;        filter the books accordingly).&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        Convert your SingleBook component to a class, and create its state&lt;br&gt;        containing a &#39;selected&#39; boolean property.&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        Clicking on a SingleBook should toggle its &#39;selected&#39; state property. If&lt;br&gt;        the &#39;selected&#39; property is true, the SingleBook should have some styling&lt;br&gt;        that reflects that state change, visually.&lt;br&gt;      &lt;/li&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="40" y="80" width="420" height="480" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-3" value="&lt;meta charset=&quot;utf-8&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(248, 249, 250); display: inline; float: none;&quot;&gt;Create a component&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="550" y="50" width="130" height="30" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-4" value="&lt;span style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; display: inline ; float: none&quot;&gt;Name:&lt;br&gt;WarningSign&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="570" y="120" width="90" height="30" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-5" value="&lt;meta charset=&quot;utf-8&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; font-family: helvetica; background-color: rgb(248, 249, 250); display: inline; float: none;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;text as a&lt;/span&gt;&lt;br style=&quot;color: rgb(0, 0, 0); font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; font-family: helvetica; background-color: rgb(248, 249, 250);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; font-family: helvetica; background-color: rgb(248, 249, 250); display: inline; float: none;&quot;&gt;prop.&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="570" y="185" width="100" height="40" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-6" value="&lt;meta charset=&quot;utf-8&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(248, 249, 250); display: inline; float: none;&quot;&gt;Alert of type danger.&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="570" y="260" width="130" height="30" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-7" value="&lt;span style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; display: inline ; float: none&quot;&gt;Create a component called as&lt;/span&gt;&lt;br style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250)&quot;&gt;&lt;span style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; display: inline ; float: none&quot;&gt;props. This component should render a &lt;/span&gt;&lt;span style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; display: inline ; float: none&quot;&gt;.&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="600" y="300" width="420" height="60" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-8" value="&lt;span style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; display: inline ; float: none&quot;&gt;Name:&lt;br&gt;MyBadge &lt;br&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="730" y="120" width="110" height="40" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-9" value="&lt;meta charset=&quot;utf-8&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(248, 249, 250); display: inline; float: none;&quot;&gt;a text and a color&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="725" y="185" width="120" height="30" as="geometry" />
        </mxCell>
        <mxCell id="F5tstXVs3diysl1EezMk-10" value="&lt;meta charset=&quot;utf-8&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; font-family: helvetica; background-color: rgb(248, 249, 250); display: inline; float: none;&quot;&gt;Badge react-bootstrap component&lt;/span&gt;&lt;br style=&quot;color: rgb(0, 0, 0); font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; font-family: helvetica; background-color: rgb(248, 249, 250);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; font-family: helvetica; background-color: rgb(248, 249, 250); display: inline; float: none;&quot;&gt;with those properties&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="720" y="230" width="210" height="40" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
